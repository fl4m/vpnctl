name: Python Lint & Test

on: [push]

jobs:
  build-lint-test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
            python-version: ${{ matrix.python-version }}
      - name: Check python version
        run: python --version
      # This is required for now since OpenVPN is the only available backend.
      # Maybe we create separate integration tests later.
      - name: Install OpenVPN
        run: |
          sudo apt install apt-transport-https
          wget https://swupdate.openvpn.net/repos/openvpn-repo-pkg-key.pub
          sudo apt-key add openvpn-repo-pkg-key.pub
          source /etc/os-release
          sudo wget -O /etc/apt/sources.list.d/openvpn3.list https://swupdate.openvpn.net/community/openvpn3/repos/openvpn3-$VERSION_CODENAME.list
          sudo apt update
          sudo apt install openvpn3
      - name: Setup poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.1.4
          PATH=~/.local/bin:$PATH
      - name: Setup dependencies
        run: |
          poetry install -vv --no-interaction
      - name: Lint with black
        run: |
          poetry run black . --check --diff
      - name: Run tests
        run: |
          poetry run pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml
      - name: Uplaod test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}


  publish-test-results:
    name: Publish Test Results
    needs: build-lint-test
    runs-on: ubuntu-latest
    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: pytest-results
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.6
        with:
          check_name: Unit Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: test-results-*.xml
